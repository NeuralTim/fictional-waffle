import pygame as pg, math, random

pg.init()

SIZE_X = 1400
SIZE_Y = 800
FPS = 60
run = True

x_pos = []
y_pos = []
radius = []
mass = []
total_x = []
total_y = []
x_vel = []
y_vel = []

mode = input('Wanna create your own planetary system (create), or generate it randomly?(generate) ')

if mode == 'generate':
    bodies_num = input('How many bodies to simulate?: ')
    for body in range(int(bodies_num)):
        x_pos.append(random.randint(0, SIZE_X))
        y_pos.append(random.randint(0, SIZE_Y))
        radius.append(random.randint(3, 12))
        mass.append(int(radius[body])*10**24)
        x_vel.append(int(0))
        y_vel.append(int(0))

elif mode == 'create':
    bodies_num = input('How many bodies to simulate?: ')
    for BODY in range(int(bodies_num)):
        x = input('X position of planet: ')
        y = input('Y position of planet: ')
        rad = input('Planet radius: ')
        x_velocity = input('Planet x velocity: ')
        y_velocity = input('Planet y velocity: ')

        x_pos.append(int(x))
        y_pos.append(int(y))
        radius.append(int(rad))
        mass.append(int(radius[BODY])*10**24)
        x_vel.append(int(x_velocity))
        y_vel.append(int(y_velocity))

screen = pg.display.set_mode([SIZE_X, SIZE_Y])
clock = pg.time.Clock()


class Bodies():
    def __init__(self):
        self.bodies_num = len(x_pos)
        self.G = 6.67*10**-11
        self.meters = 500000
        self.mode = mode

    def draw(self):

        #bodies drawing
        for i in range(self.bodies_num):
            pg.draw.circle(screen, 'yellow', (x_pos[i], y_pos[i]), radius[i])

    def calculate(self):

        #loops for iterating at every single body
        for body1 in range(self.bodies_num):
            for body2 in range(self.bodies_num):

                #checking if both bodies are the same one
                if body1 == body2:
                    continue
                
                #calculating all distances
                x_dist = abs(x_pos[body1] - x_pos[body2])
                y_dist = abs(y_pos[body1] - y_pos[body2])
                pix_dist = math.sqrt(x_dist**2 + y_dist**2)
                distance = pix_dist*self.meters

                #calculating force
                force = self.G*mass[body1]*mass[body2]/distance**2
                
                #calculating acceleration
                acc = force/mass[body1]

                #checking if bodies are lined up in any axis
                if y_dist == 0:
                    if y_pos[body1] > y_pos[body2]:
                        acc = acc*-1
                    total_y.append(acc)

                if x_dist == 0:
                    if x_pos[body1] > x_pos[body2]:
                        acc = acc*-1
                    total_x.append(acc)

                else:
                    
                    #calculating angle between hypotenuse and sides, and single axes accelerations
                    theta = math.degrees(math.sin(y_dist/pix_dist))
                    x_acc = math.cos(math.radians(theta))*acc
                    y_acc = math.sin(math.radians(theta))*acc

                    #setting correct direction of vectors in both axes
                    if x_pos[body1] > x_pos[body2]:
                        x_acc = x_acc*-1
                    if y_pos[body1] > y_pos[body2]:
                        y_acc = y_acc*-1

                    #collecting all vectors in both axes
                    total_x.append(x_acc)
                    total_y.append(y_acc)
                
                #choosing mode
                if self.mode == 'create':
                    #adding velocity
                    x_vel[body1] = x_vel[body1] + sum(total_x)
                    y_vel[body1] = y_vel[body1] + sum(total_y)
                    #setting new position
                    x_pos[body1] =  x_pos[body1] + x_vel[body1]
                    y_pos[body1] =  y_pos[body1] + y_vel[body1]
                else:
                    #setting new position
                    x_pos[body1] =  x_pos[body1] + sum(total_x)
                    y_pos[body1] =  y_pos[body1] + sum(total_y)
                
                #lists clearing
                total_x.clear()
                total_y.clear()

bodies = Bodies()

while run:
    fps = clock.get_fps()
    print('FPS: ' + str(fps))
    clock.tick(FPS)
    screen.fill('black')
    for evt in pg.event.get():
        if evt.type == pg.QUIT:
            pg.quit()
            run = False
    bodies.draw()
    bodies.calculate()
    pg.display.flip()
